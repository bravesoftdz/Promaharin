/******************************************************************************/
/****     Generated by IBExpert 2015.12.21.1 06/11/2018 10:55:04 p. m.     ****/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES ISO8859_1;

SET CLIENTLIB 'C:\app\server\fbclient.dll';

CREATE DATABASE 'C:\app\data\PROMAHARIN.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET ISO8859_1 COLLATION ISO8859_1;



/******************************************************************************/
/****                               Domains                                ****/
/******************************************************************************/

CREATE DOMAIN BOOLEAN AS
SMALLINT
CHECK (value = 0 or value = 1);

CREATE DOMAIN CODE AS
INTEGER;

CREATE DOMAIN DATETIME AS
TIMESTAMP;

CREATE DOMAIN GUID AS
VARCHAR(38);

CREATE DOMAIN MONEY AS
DOUBLE PRECISION;

CREATE DOMAIN STRING010 AS
VARCHAR(10);

CREATE DOMAIN STRING020 AS
VARCHAR(20);

CREATE DOMAIN STRING030 AS
VARCHAR(30);

CREATE DOMAIN STRING050 AS
VARCHAR(50);

CREATE DOMAIN STRING100 AS
VARCHAR(100);



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR GENCATEGORY;
SET GENERATOR GENCATEGORY TO 0;

CREATE GENERATOR GENCATERER;
SET GENERATOR GENCATERER TO 0;

CREATE GENERATOR GENCLIENT;
SET GENERATOR GENCLIENT TO 3;

CREATE GENERATOR GENCONDITION;
SET GENERATOR GENCONDITION TO 5;

CREATE GENERATOR GENDESTINATION;
SET GENERATOR GENDESTINATION TO 112;

CREATE GENERATOR GENDRIVER;
SET GENERATOR GENDRIVER TO 61;

CREATE GENERATOR GENFUEL;
SET GENERATOR GENFUEL TO 9;

CREATE GENERATOR GENPRODUCT;
SET GENERATOR GENPRODUCT TO 11;

CREATE GENERATOR GENPROVIDER;
SET GENERATOR GENPROVIDER TO 69;

CREATE GENERATOR GENPROVISIONER;
SET GENERATOR GENPROVISIONER TO 15;

CREATE GENERATOR GENSELLER;
SET GENERATOR GENSELLER TO 0;

CREATE GENERATOR GENSTOCK;
SET GENERATOR GENSTOCK TO 6;

CREATE GENERATOR GENSUPPLIER;
SET GENERATOR GENSUPPLIER TO 40;

CREATE GENERATOR GENTRUCK;
SET GENERATOR GENTRUCK TO 63;

CREATE GENERATOR UC_LOG_ID_SEQ;
SET GENERATOR UC_LOG_ID_SEQ TO 1;

CREATE GENERATOR UC_MESSENGER_ID_SEQ;
SET GENERATOR UC_MESSENGER_ID_SEQ TO 1;

CREATE GENERATOR UC_MONITOR_ID_SEQ;
SET GENERATOR UC_MONITOR_ID_SEQ TO 1;

CREATE GENERATOR UC_PARAMETERS_ID_SEQ;
SET GENERATOR UC_PARAMETERS_ID_SEQ TO 9;

CREATE GENERATOR UC_RIGHTSEX_ID_SEQ;
SET GENERATOR UC_RIGHTSEX_ID_SEQ TO 1;

CREATE GENERATOR UC_RIGHTS_ID_SEQ;
SET GENERATOR UC_RIGHTS_ID_SEQ TO 219;

CREATE GENERATOR UC_USERSLOGGED_ID_SEQ;
SET GENERATOR UC_USERSLOGGED_ID_SEQ TO 356;

CREATE GENERATOR UC_USERS_ID_SEQ;
SET GENERATOR UC_USERS_ID_SEQ TO 10;



/******************************************************************************/
/****                          Stored procedures                           ****/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE CONCAT_CONDITION (
    ID GUID)
RETURNS (
    CONCAT VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CONCAT_DESTINATION (
    ID GUID)
RETURNS (
    CONCAT VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE ACCOUNT (
    IDACCOUNT      GUID NOT NULL,
    CODE           CODE,
    NAME           STRING050,
    IDACCOUNTTYPE  GUID,
    IDUSER         CODE
);


CREATE TABLE ACCOUNTTYPE (
    IDACCOUNTTYPE  GUID NOT NULL,
    NAME           STRING020
);


CREATE TABLE BATCH (
    IDBATCH        GUID NOT NULL,
    FECHA          DATETIME,
    CODIGO         STRING020,
    IDBATCHSTATUS  CODE
);


CREATE TABLE BATCHDETAIL (
    IDBATCHDETAIL  GUID NOT NULL,
    IDBATCH        GUID,
    FECHA          DATETIME,
    CODIGO         STRING020,
    CANTIDAD       CODE,
    IMPRESO        BOOLEAN
);


CREATE TABLE BATCHSTATUS (
    IDBATCHSTATUS  CODE NOT NULL,
    NAME           STRING020
);


CREATE TABLE CATEGORY (
    IDCATEGORY  GUID NOT NULL,
    CODE        CODE,
    NAME        STRING050
);


CREATE TABLE CATERER (
    IDCATERER     GUID NOT NULL,
    CODE          CODE,
    NAME          STRING050,
    DOMICILIO     STRING050,
    COLONIA       STRING050,
    CODIGOPOSTAL  CODE,
    ESTADO        STRING020,
    CIUDAD        STRING020,
    RFC           STRING020
);


CREATE TABLE CLIENT (
    IDCLIENT   GUID NOT NULL,
    CODE       CODE,
    NAME       STRING050,
    DIRECCION  STRING050,
    TELEFONO   STRING010
);


CREATE TABLE COIN (
    IDCOIN  GUID NOT NULL,
    NAME    STRING010
);


CREATE TABLE CONDITION (
    IDCONDITION  GUID NOT NULL,
    CODE         CODE,
    NAME         STRING050
);


CREATE TABLE DESTINATION (
    IDDESTINATION  GUID NOT NULL,
    CODE           CODE,
    NAME           STRING050
);


CREATE TABLE DRIVER (
    IDDRIVER  GUID NOT NULL,
    CODE      CODE,
    NAME      STRING050
);


CREATE TABLE FUEL (
    IDFUEL  GUID NOT NULL,
    CODE    CODE,
    NAME    STRING050,
    PRECIO  MONEY
);


CREATE TABLE INPUTS (
    IDINPUTS      GUID NOT NULL,
    IDACCOUNT     GUID,
    IDCLIENT      GUID,
    FECHA         DATETIME,
    ORDEN         CODE,
    FACTURA       CODE,
    IDCOIN        GUID,
    IDPRODUCT     GUID,
    CANTIDAD      MONEY,
    PRECIO        MONEY,
    IDINPUTSTATE  GUID,
    IDUSER        GUID
);


CREATE TABLE INPUTSTATE (
    IDINPUTSTATE  GUID NOT NULL,
    NAME          STRING020
);


CREATE TABLE INVENTORY (
    IDINVENTORY    GUID NOT NULL,
    FECHA          DATETIME,
    FOLIO          STRING010,
    IDPROVISIONER  GUID,
    IDFUEL         GUID,
    CANTIDAD       MONEY,
    PRECIO         MONEY,
    AJUSTE         MONEY
);


CREATE TABLE "ORDER" (
    IDORDER     GUID NOT NULL,
    FECHA       DATETIME,
    FOLIO       CODE,
    IDCATERER   GUID,
    COMENTARIO  STRING100,
    ENVIO       INTEGER
);


CREATE TABLE ORDERDETAIL (
    IDORDERDETAIL  GUID NOT NULL,
    IDORDER        GUID,
    IDPRODUCT      GUID,
    CANTIDAD       MONEY,
    PRECIO         MONEY
);


CREATE TABLE OUTPUTS (
    IDOUTPUTS    GUID NOT NULL,
    IDACCOUNT    GUID,
    FECHA        DATETIME,
    PAYEE        STRING050,
    IDCATEGORY   GUID,
    IDPAYMETHOD  GUID,
    MEMO         STRING050,
    OUTFLOW      MONEY,
    TAXED        BOOLEAN,
    IDUSER       CODE
);


CREATE TABLE PAYMETHOD (
    IDPAYMETHOD  GUID NOT NULL,
    NAME         STRING020
);


CREATE TABLE PRODUCT (
    IDPRODUCT  GUID NOT NULL,
    CODE       CODE,
    NAME       STRING050
);


CREATE TABLE PROVIDER (
    IDPROVIDER    GUID NOT NULL,
    CODE          CODE,
    NAME          STRING050,
    RAZON_SOCIAL  STRING050,
    TELEFONO      STRING020,
    CONTACTO      STRING030,
    DIRECCION     STRING050,
    IDPRODUCT     GUID,
    PRECIO        MONEY
);


CREATE TABLE PROVISIONER (
    IDPROVISIONER  GUID NOT NULL,
    CODE           CODE,
    NAME           STRING050,
    IDFUEL         GUID,
    PRECIO         MONEY
);


CREATE TABLE QUOTATION (
    IDQUOTATION  GUID NOT NULL,
    FECHA        DATETIME,
    IDCLIENT     GUID,
    CANTIDAD     MONEY,
    IDUNIT       GUID,
    IDPRODUCT    GUID,
    PRECIO       MONEY,
    IDSELLER     GUID
);


CREATE TABLE QUOTATION_CONDITION (
    IDQUOTATIONCONDITION  GUID NOT NULL,
    IDQUOTATION           GUID,
    IDCONDITION           GUID
);


CREATE TABLE RECEPTION (
    IDRECEPTION  GUID NOT NULL,
    FECHA        DATETIME,
    IDPROVIDER   GUID,
    IDPRODUCT    GUID,
    IDTRUCK      GUID,
    IDDRIVER     GUID,
    CANTIDAD     MONEY,
    PRECIO       MONEY
);


CREATE TABLE REFUEL (
    IDREFUEL    GUID NOT NULL,
    FECHA       DATETIME,
    IDTRUCK     GUID,
    IDDRIVER    GUID,
    IDSUPPLIER  GUID,
    IDFUEL      GUID,
    CANTIDAD    MONEY,
    PRECIO      MONEY
);


CREATE TABLE REFUEL_DESTINATION (
    IDREFUELDESTINATION  GUID NOT NULL,
    IDREFUEL             GUID NOT NULL,
    IDDESTINATION        GUID NOT NULL
);


CREATE TABLE SELLER (
    IDSELLER  GUID NOT NULL,
    CODE      CODE,
    NAME      STRING050
);


CREATE TABLE STOCK (
    IDSTOCK  CODE NOT NULL,
    IDFUEL   GUID,
    SALDO    MONEY
);


CREATE TABLE SUPPLIER (
    IDSUPPLIER  GUID NOT NULL,
    CODE        CODE,
    NAME        STRING050
);


CREATE TABLE TRUCK (
    IDTRUCK           GUID NOT NULL,
    CODE              CODE,
    NAME              STRING050,
    IDFUEL            GUID,
    PRECIO            MONEY,
    MARCA             STRING030,
    MODELO            INTEGER,
    PLACAS            STRING010,
    VIGENCIA_TARJETA  DATETIME,
    VIGENCIA_SEGURO   DATETIME
);


CREATE TABLE UC_LOG (
    ID             INTEGER NOT NULL,
    APPLICATIONID  VARCHAR(50),
    USERID         INTEGER,
    "MESSAGE"      VARCHAR(255),
    LOGDATE        TIMESTAMP,
    LOGLEVEL       INTEGER
);


CREATE TABLE UC_MESSENGER (
    ID             INTEGER NOT NULL,
    USERIDFROM     INTEGER,
    USERIDTO       INTEGER,
    SUBJECT        VARCHAR(50),
    "MESSAGE"      BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    SENDDATE       TIMESTAMP,
    RECEIVEDATE    TIMESTAMP,
    RETURNRECEIPT  INTEGER,
    IMPORTANT      INTEGER
);


CREATE TABLE UC_MONITOR (
    ID             INTEGER NOT NULL,
    APPLICATIONID  VARCHAR(50),
    USERID         INTEGER,
    EVENTDATE      TIMESTAMP,
    FORMNAME       VARCHAR(250),
    FORMCAPTION    VARCHAR(100),
    "EVENT"        CHAR(1),
    DATA           BLOB SUB_TYPE 1 SEGMENT SIZE 1024,
    DATASETNAME    VARCHAR(50)
);


CREATE TABLE UC_PARAMETERS (
    ID          INTEGER NOT NULL,
    PARAMNAME   VARCHAR(64),
    PARAMTYPE   INTEGER,
    PARAMVALUE  BLOB SUB_TYPE 1 SEGMENT SIZE 1024
);


CREATE TABLE UC_RIGHTS (
    ID              INTEGER NOT NULL,
    USERID          INTEGER,
    APPLICATIONID   VARCHAR(50),
    COMPONENTNAME   VARCHAR(50),
    RECORDCHECKSUM  CHAR(32)
);


CREATE TABLE UC_RIGHTSEX (
    ID              INTEGER NOT NULL,
    USERID          INTEGER,
    APPLICATIONID   VARCHAR(50),
    COMPONENTNAME   VARCHAR(50),
    CONTAINERNAME   VARCHAR(50),
    RECORDCHECKSUM  CHAR(32)
);


CREATE TABLE UC_USERS (
    ID                       INTEGER NOT NULL,
    NAME                     VARCHAR(30),
    USERNAME                 VARCHAR(30),
    "PASSWORD"               CHAR(32),
    PASSWORDEXPIRATIONDATE   DATE,
    PASSWORDEXPIRATIONCOUNT  INTEGER,
    PASSWORDVALIDITY         INTEGER,
    EMAIL                    VARCHAR(150),
    RECORDTYPE               CHAR(1),
    PROFILEID                INTEGER,
    RECORDCHECKSUM           CHAR(32),
    ADDITIONALATTRIBUTES     INTEGER,
    "INACTIVE"               INTEGER,
    EXTERNALID               INTEGER
);


CREATE TABLE UC_USERSLOGGED (
    ID             INTEGER NOT NULL,
    LOGONID        CHAR(38),
    USERID         INTEGER,
    APPLICATIONID  VARCHAR(50),
    MACHINENAME    VARCHAR(50),
    LOGONDATE      TIMESTAMP
);


CREATE TABLE UNIT (
    IDUNIT  GUID NOT NULL,
    NAME    STRING010
);




/******************************************************************************/
/****                          Unique constraints                          ****/
/******************************************************************************/

ALTER TABLE DESTINATION ADD CONSTRAINT UNQ1_DESTINATION UNIQUE (CODE);
ALTER TABLE DESTINATION ADD CONSTRAINT UNQ2_DESTINATION UNIQUE (NAME);
ALTER TABLE DRIVER ADD CONSTRAINT UNQ1_DRIVER UNIQUE (CODE);
ALTER TABLE DRIVER ADD CONSTRAINT UNQ2_DRIVER UNIQUE (NAME);
ALTER TABLE FUEL ADD CONSTRAINT UNQ1_FUEL UNIQUE (CODE);
ALTER TABLE FUEL ADD CONSTRAINT UNQ2_FUEL UNIQUE (NAME);
ALTER TABLE PRODUCT ADD CONSTRAINT UNQ1_PRODUCT UNIQUE (CODE);
ALTER TABLE PRODUCT ADD CONSTRAINT UNQ2_PRODUCT UNIQUE (NAME);
ALTER TABLE PROVIDER ADD CONSTRAINT UNQ1_PROVIDER UNIQUE (CODE);
ALTER TABLE PROVIDER ADD CONSTRAINT UNQ2_PROVIDER UNIQUE (NAME);
ALTER TABLE PROVISIONER ADD CONSTRAINT UNQ1_PROVISIONER UNIQUE (CODE);
ALTER TABLE PROVISIONER ADD CONSTRAINT UNQ2_PROVISIONER UNIQUE (NAME);
ALTER TABLE SUPPLIER ADD CONSTRAINT UNQ1_SUPPLIER UNIQUE (CODE);
ALTER TABLE SUPPLIER ADD CONSTRAINT UNQ2_SUPPLIER UNIQUE (NAME);
ALTER TABLE TRUCK ADD CONSTRAINT UNQ1_TRUCK UNIQUE (CODE);
ALTER TABLE TRUCK ADD CONSTRAINT UNQ2_TRUCK UNIQUE (NAME);
ALTER TABLE UC_PARAMETERS ADD CONSTRAINT UC_PARAMETERS_PARAMNAME_UK UNIQUE (PARAMNAME);


/******************************************************************************/
/****                             Primary keys                             ****/
/******************************************************************************/

ALTER TABLE ACCOUNT ADD CONSTRAINT PK_ACCOUNT PRIMARY KEY (IDACCOUNT);
ALTER TABLE ACCOUNTTYPE ADD CONSTRAINT PK_ACCOUNTTYPE PRIMARY KEY (IDACCOUNTTYPE);
ALTER TABLE BATCH ADD CONSTRAINT PK_BATCH PRIMARY KEY (IDBATCH);
ALTER TABLE BATCHDETAIL ADD CONSTRAINT PK_BATCHDETAIL PRIMARY KEY (IDBATCHDETAIL);
ALTER TABLE BATCHSTATUS ADD CONSTRAINT PK_BATCHSTATUS PRIMARY KEY (IDBATCHSTATUS);
ALTER TABLE CATEGORY ADD CONSTRAINT PK_CATEGORY PRIMARY KEY (IDCATEGORY);
ALTER TABLE CATERER ADD CONSTRAINT PK_CATERER PRIMARY KEY (IDCATERER);
ALTER TABLE CLIENT ADD CONSTRAINT PK_CLIENT PRIMARY KEY (IDCLIENT);
ALTER TABLE COIN ADD CONSTRAINT PK_COIN PRIMARY KEY (IDCOIN);
ALTER TABLE CONDITION ADD CONSTRAINT PK_CONDITION PRIMARY KEY (IDCONDITION);
ALTER TABLE DESTINATION ADD CONSTRAINT PK_DESTINATION PRIMARY KEY (IDDESTINATION);
ALTER TABLE DRIVER ADD CONSTRAINT PK_DRIVER PRIMARY KEY (IDDRIVER);
ALTER TABLE FUEL ADD CONSTRAINT PK_FUEL PRIMARY KEY (IDFUEL);
ALTER TABLE INPUTS ADD CONSTRAINT PK_INPUTS PRIMARY KEY (IDINPUTS);
ALTER TABLE INPUTSTATE ADD CONSTRAINT PK_INPUTSTATE PRIMARY KEY (IDINPUTSTATE);
ALTER TABLE INVENTORY ADD CONSTRAINT PK_INVENTORY PRIMARY KEY (IDINVENTORY);
ALTER TABLE "ORDER" ADD CONSTRAINT PK_ORDER PRIMARY KEY (IDORDER);
ALTER TABLE ORDERDETAIL ADD CONSTRAINT PK_ORDERDETAIL PRIMARY KEY (IDORDERDETAIL);
ALTER TABLE OUTPUTS ADD CONSTRAINT PK_OUTPUTS PRIMARY KEY (IDOUTPUTS);
ALTER TABLE PAYMETHOD ADD CONSTRAINT PK_PAYMETHOD PRIMARY KEY (IDPAYMETHOD);
ALTER TABLE PRODUCT ADD CONSTRAINT PK_PRODUCT PRIMARY KEY (IDPRODUCT);
ALTER TABLE PROVIDER ADD CONSTRAINT PK_PROVIDER PRIMARY KEY (IDPROVIDER);
ALTER TABLE PROVISIONER ADD CONSTRAINT PK_PROVISIONER PRIMARY KEY (IDPROVISIONER);
ALTER TABLE QUOTATION ADD CONSTRAINT PK_QUOTATION PRIMARY KEY (IDQUOTATION);
ALTER TABLE QUOTATION_CONDITION ADD CONSTRAINT PK_QUOTATION_CONDITION PRIMARY KEY (IDQUOTATIONCONDITION);
ALTER TABLE RECEPTION ADD CONSTRAINT PK_RECEPTION PRIMARY KEY (IDRECEPTION);
ALTER TABLE REFUEL ADD CONSTRAINT PK_REFUEL PRIMARY KEY (IDREFUEL);
ALTER TABLE REFUEL_DESTINATION ADD CONSTRAINT PK_REFUEL_DESTINATION PRIMARY KEY (IDREFUELDESTINATION);
ALTER TABLE SELLER ADD CONSTRAINT PK_SELLER PRIMARY KEY (IDSELLER);
ALTER TABLE STOCK ADD CONSTRAINT PK_STOCK PRIMARY KEY (IDSTOCK);
ALTER TABLE SUPPLIER ADD CONSTRAINT PK_SUPPLIER PRIMARY KEY (IDSUPPLIER);
ALTER TABLE TRUCK ADD CONSTRAINT PK_TRUCK PRIMARY KEY (IDTRUCK);
ALTER TABLE UC_LOG ADD CONSTRAINT UC_LOG_PK PRIMARY KEY (ID);
ALTER TABLE UC_MESSENGER ADD CONSTRAINT UC_MESSENGER_PK PRIMARY KEY (ID);
ALTER TABLE UC_MONITOR ADD CONSTRAINT UC_MONITOR_PK PRIMARY KEY (ID);
ALTER TABLE UC_PARAMETERS ADD CONSTRAINT UC_PARAMETERS_PK PRIMARY KEY (ID);
ALTER TABLE UC_RIGHTS ADD CONSTRAINT UC_RIGHTS_PK PRIMARY KEY (ID);
ALTER TABLE UC_RIGHTSEX ADD CONSTRAINT UC_RIGHTSEX_PK PRIMARY KEY (ID);
ALTER TABLE UC_USERS ADD CONSTRAINT UC_USERS_PK PRIMARY KEY (ID);
ALTER TABLE UC_USERSLOGGED ADD CONSTRAINT UC_USERSLOGGED_PK PRIMARY KEY (ID);
ALTER TABLE UNIT ADD CONSTRAINT PK_UNIT PRIMARY KEY (IDUNIT);


/******************************************************************************/
/****                             Foreign keys                             ****/
/******************************************************************************/

ALTER TABLE ACCOUNT ADD CONSTRAINT FK_ACCOUNT_1 FOREIGN KEY (IDACCOUNTTYPE) REFERENCES ACCOUNTTYPE (IDACCOUNTTYPE) ON UPDATE CASCADE;
ALTER TABLE BATCH ADD CONSTRAINT FK_BATCH_1 FOREIGN KEY (IDBATCHSTATUS) REFERENCES BATCHSTATUS (IDBATCHSTATUS) ON UPDATE CASCADE;
ALTER TABLE BATCHDETAIL ADD CONSTRAINT FK_BATCHDETAIL_1 FOREIGN KEY (IDBATCH) REFERENCES BATCH (IDBATCH) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE INPUTS ADD CONSTRAINT FK_INPUTS_1 FOREIGN KEY (IDCLIENT) REFERENCES CLIENT (IDCLIENT) ON UPDATE CASCADE;
ALTER TABLE INPUTS ADD CONSTRAINT FK_INPUTS_2 FOREIGN KEY (IDCOIN) REFERENCES COIN (IDCOIN) ON UPDATE CASCADE;
ALTER TABLE INPUTS ADD CONSTRAINT FK_INPUTS_3 FOREIGN KEY (IDPRODUCT) REFERENCES PRODUCT (IDPRODUCT) ON UPDATE CASCADE;
ALTER TABLE INPUTS ADD CONSTRAINT FK_INPUTS_4 FOREIGN KEY (IDINPUTSTATE) REFERENCES INPUTSTATE (IDINPUTSTATE) ON UPDATE CASCADE;
ALTER TABLE INPUTS ADD CONSTRAINT FK_INPUTS_5 FOREIGN KEY (IDACCOUNT) REFERENCES ACCOUNT (IDACCOUNT) ON UPDATE CASCADE;
ALTER TABLE INVENTORY ADD CONSTRAINT FK_INVENTORY_1 FOREIGN KEY (IDPROVISIONER) REFERENCES PROVISIONER (IDPROVISIONER) ON UPDATE CASCADE;
ALTER TABLE INVENTORY ADD CONSTRAINT FK_INVENTORY_2 FOREIGN KEY (IDFUEL) REFERENCES FUEL (IDFUEL) ON UPDATE CASCADE;
ALTER TABLE "ORDER" ADD CONSTRAINT FK_ORDER_1 FOREIGN KEY (IDCATERER) REFERENCES CATERER (IDCATERER) ON UPDATE CASCADE;
ALTER TABLE ORDERDETAIL ADD CONSTRAINT FK_ORDERDETAIL_1 FOREIGN KEY (IDORDER) REFERENCES "ORDER" (IDORDER) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ORDERDETAIL ADD CONSTRAINT FK_ORDERDETAIL_2 FOREIGN KEY (IDPRODUCT) REFERENCES PRODUCT (IDPRODUCT) ON UPDATE CASCADE;
ALTER TABLE OUTPUTS ADD CONSTRAINT FK_OUTPUTS_1 FOREIGN KEY (IDACCOUNT) REFERENCES ACCOUNT (IDACCOUNT) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OUTPUTS ADD CONSTRAINT FK_OUTPUTS_2 FOREIGN KEY (IDCATEGORY) REFERENCES CATEGORY (IDCATEGORY) ON UPDATE CASCADE;
ALTER TABLE OUTPUTS ADD CONSTRAINT FK_OUTPUTS_3 FOREIGN KEY (IDPAYMETHOD) REFERENCES PAYMETHOD (IDPAYMETHOD) ON UPDATE CASCADE;
ALTER TABLE PROVIDER ADD CONSTRAINT FK_PROVIDER_1 FOREIGN KEY (IDPRODUCT) REFERENCES PRODUCT (IDPRODUCT) ON UPDATE CASCADE;
ALTER TABLE QUOTATION ADD CONSTRAINT FK_QUOTATION_1 FOREIGN KEY (IDCLIENT) REFERENCES CLIENT (IDCLIENT) ON UPDATE CASCADE;
ALTER TABLE QUOTATION ADD CONSTRAINT FK_QUOTATION_2 FOREIGN KEY (IDUNIT) REFERENCES UNIT (IDUNIT) ON UPDATE CASCADE;
ALTER TABLE QUOTATION ADD CONSTRAINT FK_QUOTATION_3 FOREIGN KEY (IDPRODUCT) REFERENCES PRODUCT (IDPRODUCT) ON UPDATE CASCADE;
ALTER TABLE QUOTATION ADD CONSTRAINT FK_QUOTATION_4 FOREIGN KEY (IDSELLER) REFERENCES SELLER (IDSELLER) ON UPDATE CASCADE;
ALTER TABLE QUOTATION_CONDITION ADD CONSTRAINT FK_QUOTATION_CONDITION_1 FOREIGN KEY (IDQUOTATION) REFERENCES QUOTATION (IDQUOTATION) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE QUOTATION_CONDITION ADD CONSTRAINT FK_QUOTATION_CONDITION_2 FOREIGN KEY (IDCONDITION) REFERENCES CONDITION (IDCONDITION) ON UPDATE CASCADE;
ALTER TABLE RECEPTION ADD CONSTRAINT FK_RECEPTION_1 FOREIGN KEY (IDPROVIDER) REFERENCES PROVIDER (IDPROVIDER) ON UPDATE CASCADE;
ALTER TABLE RECEPTION ADD CONSTRAINT FK_RECEPTION_2 FOREIGN KEY (IDPRODUCT) REFERENCES PRODUCT (IDPRODUCT) ON UPDATE CASCADE;
ALTER TABLE RECEPTION ADD CONSTRAINT FK_RECEPTION_3 FOREIGN KEY (IDTRUCK) REFERENCES TRUCK (IDTRUCK) ON UPDATE CASCADE;
ALTER TABLE RECEPTION ADD CONSTRAINT FK_RECEPTION_4 FOREIGN KEY (IDDRIVER) REFERENCES DRIVER (IDDRIVER) ON UPDATE CASCADE;
ALTER TABLE REFUEL ADD CONSTRAINT FK_REFUEL_1 FOREIGN KEY (IDTRUCK) REFERENCES TRUCK (IDTRUCK) ON UPDATE CASCADE;
ALTER TABLE REFUEL ADD CONSTRAINT FK_REFUEL_3 FOREIGN KEY (IDDRIVER) REFERENCES DRIVER (IDDRIVER) ON UPDATE CASCADE;
ALTER TABLE REFUEL ADD CONSTRAINT FK_REFUEL_4 FOREIGN KEY (IDSUPPLIER) REFERENCES SUPPLIER (IDSUPPLIER) ON UPDATE CASCADE;
ALTER TABLE REFUEL ADD CONSTRAINT FK_REFUEL_5 FOREIGN KEY (IDFUEL) REFERENCES FUEL (IDFUEL) ON UPDATE CASCADE;
ALTER TABLE REFUEL_DESTINATION ADD CONSTRAINT FK_REFUEL_DESTINATION_1 FOREIGN KEY (IDREFUEL) REFERENCES REFUEL (IDREFUEL) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE REFUEL_DESTINATION ADD CONSTRAINT FK_REFUEL_DESTINATION_2 FOREIGN KEY (IDDESTINATION) REFERENCES DESTINATION (IDDESTINATION) ON UPDATE CASCADE;
ALTER TABLE STOCK ADD CONSTRAINT FK_STOCK_1 FOREIGN KEY (IDFUEL) REFERENCES FUEL (IDFUEL) ON UPDATE CASCADE;
ALTER TABLE TRUCK ADD CONSTRAINT FK_TRUCK_1 FOREIGN KEY (IDFUEL) REFERENCES FUEL (IDFUEL) ON DELETE CASCADE;


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: FUEL_AD0 */
CREATE TRIGGER FUEL_AD0 FOR FUEL
ACTIVE AFTER DELETE POSITION 0
AS
begin
  delete from stock s where s.idfuel = old.idfuel;
end
^


/* Trigger: FUEL_AI0 */
CREATE TRIGGER FUEL_AI0 FOR FUEL
ACTIVE AFTER INSERT POSITION 0
AS
begin
  insert into stock (idfuel, saldo) values (new.idfuel, 0);
end
^


/* Trigger: FUEL_AU0 */
CREATE TRIGGER FUEL_AU0 FOR FUEL
ACTIVE AFTER UPDATE POSITION 0
AS
begin
  update or insert into stock (idfuel) values (new.idfuel) matching (new.idfuel);
  update truck p set p.precio= new.precio where p.idfuel = new.idfuel;
end
^


/* Trigger: INVENTORY_AD0 */
CREATE TRIGGER INVENTORY_AD0 FOR INVENTORY
ACTIVE AFTER DELETE POSITION 0
AS
begin
  update stock s set s.saldo = s.saldo - old.cantidad where s.idfuel = old.idfuel;
end
^


/* Trigger: INVENTORY_AI0 */
CREATE TRIGGER INVENTORY_AI0 FOR INVENTORY
ACTIVE AFTER INSERT POSITION 0
AS
begin
  update stock s set s.saldo = s.saldo + new.cantidad where s.idfuel = new.idfuel;
end
^


/* Trigger: INVENTORY_AU0 */
CREATE TRIGGER INVENTORY_AU0 FOR INVENTORY
ACTIVE AFTER UPDATE POSITION 0
AS
begin
  update stock s set s.saldo = s.saldo - old.cantidad where s.idfuel = old.idfuel;
  update stock s set s.saldo = s.saldo + new.cantidad where s.idfuel = new.idfuel;
end
^


/* Trigger: REFUEL_AD0 */
CREATE TRIGGER REFUEL_AD0 FOR REFUEL
ACTIVE AFTER DELETE POSITION 0
AS
begin
  update stock s set s.saldo = s.saldo + old.cantidad where s.idfuel = old.idfuel;
end
^


/* Trigger: REFUEL_AI0 */
CREATE TRIGGER REFUEL_AI0 FOR REFUEL
ACTIVE AFTER INSERT POSITION 0
AS
begin
  update stock s set s.saldo = s.saldo - new.cantidad where s.idfuel = new.idfuel;
end
^


/* Trigger: REFUEL_AU0 */
CREATE TRIGGER REFUEL_AU0 FOR REFUEL
ACTIVE AFTER UPDATE POSITION 0
AS
begin
  update stock s set s.saldo = s.saldo + old.cantidad where s.idfuel = old.idfuel;
  update stock s set s.saldo = s.saldo - new.cantidad where s.idfuel = new.idfuel;
end
^


/* Trigger: STOCK_BI */
CREATE TRIGGER STOCK_BI FOR STOCK
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.idstock is null) then
    new.idstock = gen_id(genstock,1);
end
^

SET TERM ; ^



/******************************************************************************/
/****                          Stored procedures                           ****/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE CONCAT_CONDITION (
    ID GUID)
RETURNS (
    CONCAT VARCHAR(250))
AS
begin
  select list(name, ASCII_CHAR(13)) from condition where idcondition in (
    select qc.idcondition from quotation_condition qc where qc.idquotation = :id)
  into :concat;
  suspend;
end^


ALTER PROCEDURE CONCAT_DESTINATION (
    ID GUID)
RETURNS (
    CONCAT VARCHAR(250))
AS
begin
  select list(code || ' ' || name) from destination where iddestination in (
    select rd.iddestination from refuel_destination rd where rd.idrefuel = :id)
  into :concat;
  suspend;
end^



SET TERM ; ^

